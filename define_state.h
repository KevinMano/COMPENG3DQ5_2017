`ifndef DEFINE_STATE

// This defines the states
typedef enum logic [2:0] {
	S_IDLE,
	S_ENABLE_UART_RX,
	S_WAIT_UART_RX,
	S_M1,
	S_M2,
	S_M3
} top_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

typedef enum logic[5:0]{
	S_M1_IDLE,
	S_M1_LI0,
	S_M1_LI1,
	S_M1_LI2,
	S_M1_LI3,
	S_M1_LI4,
	S_M1_LI5,
	S_M1_LI6,
	S_M1_LI7,
	S_M1_LI8,
	S_M1_LI9,
	S_M1_LI10,
	S_M1_LI11,
	S_M1_LI12,
	S_M1_LI13,
	S_M1_LI14,
	S_M1_LI15,
	S_M1_LI16,
	S_M1_LI17,
	S_M1_LI18,
	S_M1_LI19,
	S_M1_COMM0,
	S_M1_COMM1,
	S_M1_COMM2,
	S_M1_COMM3,
	S_M1_COMM4,
	S_M1_COMM5,
	S_M1_COMM6,
	S_M1_COMM7,
	S_M1_COMM8,
	S_M1_COMM9,
	S_M1_COMM10,
	S_M1_COMM11,
	S_M1_LO0,
	S_M1_LO1,
	S_M1_LO2,
	S_M1_LO3,
	S_M1_LO4,
	S_M1_LO5,
	S_M1_LO6,
	S_M1_LO7,
	S_M1_LO8,
	S_M1_LO9,
	S_M1_LO10,
	S_M1_LO11,
	S_M1_LO12,
	S_M1_LO13,
	S_M1_LO14
} M1_state_type;

typedef enum logic[6:0]{
   S_M2_IDLE,
	S_M2_FETCH0,
	S_M2_FETCH1,
	S_M2_FETCH2,
	S_M2_FETCH3,
	S_M2_FETCH4,
	S_M2_FETCH5,
	S_M2_FETCH6,
	S_M2_FETCH7,
	S_M2_B0,
	S_M2_B1,
	S_M2_B2,
	S_M2_B3,
	S_M2_B4,
	S_M2_B5,
	S_M2_B6,
	S_M2_B7,
	S_M2_B8,
	S_M2_B9,
	S_M2_B10,
	S_M2_B11,
	S_M2_B12,
	S_M2_B13,
	S_M2_B14,
	S_M2_B15,
	S_M2_B16,
	S_M2_B17,
	S_M2_B18,
	S_M2_B19,
	S_M2_B20,
	S_M2_B21,
	S_M2_B22,
	S_M2_B23,
	S_M2_B24,
	S_M2_A0,
	S_M2_A1,
	S_M2_A2,
	S_M2_A3,
	S_M2_A4,
	S_M2_A5,
	S_M2_A6,
	S_M2_A7,
	S_M2_A8,
	S_M2_A9,
	S_M2_A10,
	S_M2_A11,
	S_M2_A12,
	S_M2_A13,
	S_M2_A14,
	S_M2_A15,
	S_M2_A16,
	S_M2_A17,
	S_M2_A18,
	S_M2_A19,
	S_M2_A20,
	S_M2_A21,
	S_M2_A22,
	S_M2_A23,
	S_M2_A24,
	S_M2_A25,
	S_M2_A26,
	S_M2_A27,
	S_M2_A28,
	S_M2_A29,
	S_M2_A30,
	S_M2_A31,
	S_M2_A32,
	S_M2_A33,
	S_M2_A34,
	S_M2_A35,
	S_M2_WRITE0,
	S_M2_WRITE1,
	S_M2_WRITE2,
	S_M2_WRITE3,
	S_M2_WRITE4
} M2_state_type;

typedef enum logic[4:0]{
	S_M3_IDLE,
	S_M3_IDENT_BEGIN,
	S_M3_IDENT0,
	S_M3_IDENT1,
	S_M3_IDENT2,
	S_M3_IDENT3,
	S_M3_IDENT4,
	S_M3_IDENT5,
	S_M3_FILL0,
	S_M3_FILL1,
	S_M3_FILL2,
	S_M3_REPEAT,
	S_M3_ZEROS,
	S_M3_ALL_ZEROS,
	S_M3_NONES,
	S_M3_ONES,
	S_M3_MIDIDLE,
	S_M3_PAUSE,
	S_M3_WAIT10,
	S_M3_WAIT11,
	S_M3_WAIT12,
	S_M3_WAIT20,
	S_M3_WAIT21,
	S_M3_WAIT22,
	S_M3_WAIT23
} M3_state_type;

`define DEFINE_STATE 1
`endif
